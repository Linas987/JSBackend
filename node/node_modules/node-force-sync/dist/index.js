"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.forceSync = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
const escape_string_regexp_1 = __importDefault(require("escape-string-regexp"));
// endblock: config
// TODO: default tmpFilePath to `/tmp` on unix-like systems?
// TODO: make default nodeExecutable platform dependent?
// block: defaultConfig
const forceConfigDefaults = {
    tagOpenWrappers: ['!!!', '!!!'],
    tagCloseWrappers: ['!!!/', '!!!'],
    tmpFilePath: '.',
    nodeExecutable: 'node',
    debug: false,
};
// endblock: funcStr
function forceSync(func, config) {
    const { tagOpenWrappers, tagCloseWrappers, tmpFilePath, nodeExecutable, debug, } = defaults(config !== null && config !== void 0 ? config : {}, forceConfigDefaults);
    const outputOpener = makeTag('OUTPUT', tagOpenWrappers);
    const outputCloser = makeTag('OUTPUT', tagCloseWrappers);
    const errorOpener = makeTag('ERROR', tagOpenWrappers);
    const errorCloser = makeTag('ERROR', tagCloseWrappers);
    const funcStr = (typeof func === 'string') ? func : Function.prototype.toString.apply(func);
    return (...args) => {
        const argsString = args.map(arg => JSON.stringify(arg)).join(', ');
        const codeString = `(${funcStr})(${argsString})
	.then(function(output) {
		console.log('${outputOpener}' + JSON.stringify(output) + '${outputCloser}');
	})
	.catch(function(error) {
		var message = (error instanceof Error) ? error.message : error;
		console.log('${errorOpener}' + JSON.stringify(message) + '${errorCloser}');
	});`;
        const tmpFile = path_1.resolve(tmpFilePath, `tmp${Date.now()}.js`);
        if (debug) {
            console.info('Generated JS:');
            console.log(codeString);
            console.info('Temporary file path:');
            console.log(tmpFile);
        }
        fs_1.writeFileSync(tmpFile, codeString, 'utf8');
        const rawOutput = child_process_1.execSync(`${nodeExecutable} ${tmpFile}`).toString();
        fs_1.unlinkSync(tmpFile);
        if (debug) {
            console.info('Execution output:');
            console.log(rawOutput);
        }
        const output = extractOutput(rawOutput, outputOpener, outputCloser);
        let error = null;
        if (output === null)
            error = extractOutput(rawOutput, errorOpener, errorCloser);
        if (debug) {
            console.info('Extracted output:');
            console.log(output);
            console.info('Extracted error:');
            console.log(error);
        }
        const isError = error !== null || (output === null && error === null);
        if (isError)
            throw new Error('' + error);
        if (output === 'undefined')
            return;
        return JSON.parse(output);
    };
}
exports.forceSync = forceSync;
const extractOutput = (rawOutput, openTag, closeTag) => { var _a, _b; return (_b = (_a = new RegExp(`${escape_string_regexp_1.default(openTag)}([\\s\\S]*)${escape_string_regexp_1.default(closeTag)}`).exec(rawOutput)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : null; };
const makeTag = (middle, [beginning, ending]) => beginning + middle + ending;
const defaults = (config, defaults) => Object.assign({}, defaults, config);
exports.default = forceSync;
